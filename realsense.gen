/*/
 * Copyright (c) 2019 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                             Martin Jacquet - September 2022
 *
 * Modified by: Selvakumar H S - August 2023
 */
/* ---- Includes ---------------------------------------------------------- */
#pragma require "openrobots2-idl >= 2.0"
#pragma require "vision-idl"

#include "or/pose/pose_estimator.gen"
#include "or/sensor/camera.gen"
#include "or/sensor/depth.idl"

/* ---- Component declaration --------------------------------------------- */
component realsense {
    version	    "1.0";
    email		"martin.jacquet@laas.fr";
    lang		"c";
    require	    "genom3 >= 2.99.26";
    codels-require	"realsense2", "opencv4";

    /* ---- Interfaces ---------------------------------------------------- */
    provides or_camera;

    /* ---- Exceptions ---------------------------------------------------- */
    exception e_rs { string<128> what; };
    exception e_io { string<128> what; };
    exception e_mem { string<128> what; };

    /* ---- Ports --------------------------------------------------------- */
    port multiple out   or::sensor::pc    pc;
    port out            or_pose_estimator::state   accel;
    port out            or_pose_estimator::state   gyro;
    port out            or_pose_estimator::state   odom;
    /* interfaces ports:
     *  port multiple out   or::sensor::frame    frame;
     *  port out  or::sensor::intrinsics    intrinsics;
     *  port out  or::sensor::extrinsics    extrinsics;
     */

    /* ---- Types --------------------------------------------------------- */
    native undist_s;
    native sync_s;

    /* ---- IDS ----------------------------------------------------------- */
    ids {
        or_camera::info info;

        or_camera::pipe pipe;   // pipe for data streams

        sync_s          v_sync; // condition variable for syncing sensor data callback and visual task
        sync_s          i_sync; // condition variable for syncing sensor data callback and inertial task
        sync_s          d_sync; // condition variable for syncing sensor data callback and depth task

        or_camera::data v_data; // copy of visual data
        or_camera::data i_data; // copy of inertial data
        or_camera::data d_data; // copy of depth data

        undist_s undist;        // undistortion parameters

        boolean registration;   // enable registration of point cloud
        struct range {    // range for normalization when computing 2D depth image
            float max;
            float min;
        } depth_range;
    };

    /* ---- Constants ----------------------------------------------------- */
    const unsigned short poll_duration_sec = 1; // duration of each poll before releasing mutex
    const double base_cov_pos   = 1e-2;     // base for position covariance computation
    const double base_cov_vel   = 1e-2;     // base for position covariance computation
    const double base_cov_acc   = 1e-2;     // base for position covariance computation
    const double base_cov_att   = 1e-4;     // base for attitude covariance computation
    const double base_cov_avel  = 1e-4;     // base for position covariance computation
    const double base_cov_aacc  = 1e-4;     // base for position covariance computation

    /* ---- Tasks --------------------------------------------------------- */
    task main {
        codel<start> rs_start(out ::ids, out extrinsics, out intrinsics, out frame, out pc)
            yield ether;
    };

    task visual {
        codel<start> rs_viz_start(out frame, out undist, out info)
            yield sleep;

        codel<sleep> rs_viz_sleep(in info.started)
            yield pause::sleep, poll;

        async codel<poll> rs_viz_poll(inout v_sync, out v_data)
            yield sleep, main;

        codel<main> rs_viz_main(in info.compression_rate, in v_data, in undist, out frame)
            yield sleep;
    };

    task inertial {
        codel<start> rs_inertial_start(out accel, out gyro, out odom)
            yield sleep;

        codel<sleep> rs_inertial_sleep(in info.started)
            yield pause::sleep, poll;

        async codel<poll> rs_inertial_poll(inout i_sync, out i_data)
            yield sleep, main;

        codel<main> rs_inertial_main(in info.compression_rate, in i_data, in undist, out accel, out gyro, out odom)
            yield sleep;
    };

    task depth {
        codel<start> rs_depth_start(out pc, out frame, out depth_range, out registration)
            yield sleep;

        codel<sleep> rs_depth_sleep(in info.started)
            yield pause::sleep, poll;

        async codel<poll> rs_depth_poll(inout d_sync, out d_data)
            yield sleep, main;

        codel<main> rs_depth_main(in d_data, in registration, out pc)
            yield img, sleep;

        codel<img> rs_depth_img(in d_data, in registration, in depth_range, out frame)
            yield sleep;
    };

    /* ---- Hardware connection ------------------------------------------- */
    activity connect_d435(in string<32> serial = : "Serial number of the device") {
        task main;
        throw e_rs, e_io;
        after setup_stream_d435;

        codel<start> rs_connect(in serial, out pipe, out info.started, out intrinsics)
            yield ether;
    };

    activity disconnect_d435() {
        task main;
        throw e_rs;
        after connect_d435;

        codel<start> rs_disconnect(out pipe, out info.started)
            yield ether;
    };

    function setup_stream_t265(in boolean fisheye = FALSE,
                                 in boolean odometry = FALSE,
                                 in boolean accelerometer = FALSE,
                                 in boolean gyroscope = FALSE) {
        codel enable_streams_t265(in fisheye, in odometry, in accelerometer, in gyroscope, inout pipe);
    };

    function setup_stream_d435(in boolean color = FALSE,
                                 in boolean depth = FALSE,
                                 in boolean infrared = FALSE,
                                 in boolean accelerometer = FALSE,
                                 in boolean gyroscope = FALSE) {
        codel enable_streams_d435(in info, in color, in depth, in infrared, in accelerometer, in gyroscope, inout pipe);
    };

    activity list_devices(out sequence<string> serial = : "List of serial of available devices.") {
        task main;

        codel<start> list_devices(in pipe, out serial)
            yield ether;
    };

    /* ---- Camera setting ------------------------------------------------ */
    attribute set_jpeg(in info.compression_rate = -1 : "Image JPEG compression level (0-100); -1 to disable.") {
        throw e_io;
        validate set_compression_rate(local in compression_rate);
    };

    activity set_undistortion(in unsigned short size = 500 : "Pixel size of the desired undistorted image; 0 to disable",
                              in float fov = 2 : "Field of view of the undistorted image in radian") {
        task visual;
        throw e_io;

        codel<start> rs_set_undistort(in size, in fov, in pipe, out undist, out intrinsics)
            yield ether;
    };

    attribute set_format(in info.format = "RGB8" : "Pixel format (YUYV, RGB8, RGBA8, BGR8, BGRA8, Y16)") {
        throw e_io;
        validate set_format(local in format);
    };

    attribute set_fps(in info.frequency = 30 : "Camera frequency (6, 15, 30, 60)") {
        throw e_io;
        validate set_fps(local in frequency, in info.size.w);
    };

    attribute set_size(in info.size = {1280, 720} : "Video size (1920x1080, 1280x720, 960x540, 848x480, 640x480, 640x360, 424x240, 320x240)") {
        throw e_io;
        validate set_size(local in size);
    };

    attribute set_registration(in registration = FALSE : "Enable or disable point cloud registration");

    attribute set_depth_range(in depth_range.min = 0.1 : "Minimum depth (in meter) for normalization when computing 2D depth image",
                              in depth_range.max = 3. : "Maximum depth (in meter) for normalization when computing 2D depth image");

    /* ---- Extrinsics ---------------------------------------------------- */
    activity set_extrinsics(in sequence<float,6> ext_values) {
        task main;

        codel<start> rs_set_extrinsics(in ext_values, out extrinsics)
            yield ether;
    };

};
